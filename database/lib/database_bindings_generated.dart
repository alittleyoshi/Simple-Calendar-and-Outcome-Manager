// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as pkg_ffi;

/// Bindings for `src/database.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class DatabaseBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DatabaseBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DatabaseBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Dart API functions
  int Dart_init() {
    return _Dart_init();
  }

  late final _Dart_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('Dart_init');
  late final _Dart_init = _Dart_initPtr.asFunction<int Function()>();

  int Dart_query_tasklist_num() {
    return _Dart_query_tasklist_num();
  }

  late final _Dart_query_tasklist_numPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'Dart_query_tasklist_num');
  late final _Dart_query_tasklist_num =
      _Dart_query_tasklist_numPtr.asFunction<int Function()>();

  int Dart_query_tasklist_id(
    int num,
  ) {
    return _Dart_query_tasklist_id(
      num,
    );
  }

  late final _Dart_query_tasklist_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'Dart_query_tasklist_id');
  late final _Dart_query_tasklist_id =
      _Dart_query_tasklist_idPtr.asFunction<int Function(int)>();

  ffi.Pointer<pkg_ffi.Utf8> Dart_query_tasklist_name(
    int id,
  ) {
    return _Dart_query_tasklist_name(
      id,
    );
  }

  late final _Dart_query_tasklist_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pkg_ffi.Utf8> Function(ffi.Int)>>(
          'Dart_query_tasklist_name');
  late final _Dart_query_tasklist_name = _Dart_query_tasklist_namePtr
      .asFunction<ffi.Pointer<pkg_ffi.Utf8> Function(int)>();

  int Dart_query_task_num(
    int task_num,
  ) {
    return _Dart_query_task_num(
      task_num,
    );
  }

  late final _Dart_query_task_numPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'Dart_query_task_num');
  late final _Dart_query_task_num =
      _Dart_query_task_numPtr.asFunction<int Function(int)>();

  Dart_Task Dart_get_task(
    int list_num,
    int task_num,
  ) {
    return _Dart_get_task(
      list_num,
      task_num,
    );
  }

  late final _Dart_get_taskPtr =
      _lookup<ffi.NativeFunction<Dart_Task Function(ffi.Int, ffi.Int)>>(
          'Dart_get_task');
  late final _Dart_get_task =
      _Dart_get_taskPtr.asFunction<Dart_Task Function(int, int)>();

  int Dart_create_tasklist(
    ffi.Pointer<pkg_ffi.Utf8> list_name,
  ) {
    return _Dart_create_tasklist(
      list_name,
    );
  }

  late final _Dart_create_tasklistPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pkg_ffi.Utf8>)>>(
          'Dart_create_tasklist');
  late final _Dart_create_tasklist = _Dart_create_tasklistPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Utf8>)>();

  int Dart_create_task(
    int list_num,
    ffi.Pointer<pkg_ffi.Utf8> title,
    ffi.Pointer<pkg_ffi.Utf8> description,
    ffi.Pointer<pkg_ffi.Utf8> startDate,
    ffi.Pointer<pkg_ffi.Utf8> endDate,
    int status,
  ) {
    return _Dart_create_task(
      list_num,
      title,
      description,
      startDate,
      endDate,
      status,
    );
  }

  late final _Dart_create_taskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<pkg_ffi.Utf8>,
              ffi.Pointer<pkg_ffi.Utf8>,
              ffi.Pointer<pkg_ffi.Utf8>,
              ffi.Pointer<pkg_ffi.Utf8>,
              ffi.Int)>>('Dart_create_task');
  late final _Dart_create_task = _Dart_create_taskPtr.asFunction<
      int Function(int, ffi.Pointer<pkg_ffi.Utf8>, ffi.Pointer<pkg_ffi.Utf8>,
          ffi.Pointer<pkg_ffi.Utf8>, ffi.Pointer<pkg_ffi.Utf8>, int)>();

  int Dart_update_task(
    int list_id,
    int task_id,
    ffi.Pointer<pkg_ffi.Utf8> title,
    ffi.Pointer<pkg_ffi.Utf8> description,
    ffi.Pointer<pkg_ffi.Utf8> startDate,
    ffi.Pointer<pkg_ffi.Utf8> endDate,
    int status,
  ) {
    return _Dart_update_task(
      list_id,
      task_id,
      title,
      description,
      startDate,
      endDate,
      status,
    );
  }

  late final _Dart_update_taskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Int,
              ffi.Pointer<pkg_ffi.Utf8>,
              ffi.Pointer<pkg_ffi.Utf8>,
              ffi.Pointer<pkg_ffi.Utf8>,
              ffi.Pointer<pkg_ffi.Utf8>,
              ffi.Int)>>('Dart_update_task');
  late final _Dart_update_task = _Dart_update_taskPtr.asFunction<
      int Function(
          int,
          int,
          ffi.Pointer<pkg_ffi.Utf8>,
          ffi.Pointer<pkg_ffi.Utf8>,
          ffi.Pointer<pkg_ffi.Utf8>,
          ffi.Pointer<pkg_ffi.Utf8>,
          int)>();

  int Dart_update_task_stat(
    int list_id,
    int task_id,
    int stat,
  ) {
    return _Dart_update_task_stat(
      list_id,
      task_id,
      stat,
    );
  }

  late final _Dart_update_task_statPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'Dart_update_task_stat');
  late final _Dart_update_task_stat =
      _Dart_update_task_statPtr.asFunction<int Function(int, int, int)>();

  int Dart_move_task(
    int list_id,
    int task_id,
    int to_list_id,
  ) {
    return _Dart_move_task(
      list_id,
      task_id,
      to_list_id,
    );
  }

  late final _Dart_move_taskPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'Dart_move_task');
  late final _Dart_move_task =
      _Dart_move_taskPtr.asFunction<int Function(int, int, int)>();

  int Dart_delete_task(
    int list_id,
    int task_id,
  ) {
    return _Dart_delete_task(
      list_id,
      task_id,
    );
  }

  late final _Dart_delete_taskPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'Dart_delete_task');
  late final _Dart_delete_task =
      _Dart_delete_taskPtr.asFunction<int Function(int, int)>();

  int Dart_delete_tasklist(
    int list_id,
  ) {
    return _Dart_delete_tasklist(
      list_id,
    );
  }

  late final _Dart_delete_tasklistPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'Dart_delete_tasklist');
  late final _Dart_delete_tasklist =
      _Dart_delete_tasklistPtr.asFunction<int Function(int)>();
}

final class Dart_Task extends ffi.Struct {
  @ffi.Int()
  external int list_id;

  @ffi.Int()
  external int id;

  external ffi.Pointer<pkg_ffi.Utf8> title;

  external ffi.Pointer<pkg_ffi.Utf8> description;

  external ffi.Pointer<pkg_ffi.Utf8> startDate;

  external ffi.Pointer<pkg_ffi.Utf8> endDate;

  @ffi.Int()
  external int status;
}
